import logging
import gspread
from google.oauth2.service_account import Credentials
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from datetime import datetime
import os
import json

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7298874610:AAEKSlBVzZg2oLmlcyxmZXMPTTb_DEtOFK4')
GOOGLE_SHEET_ID = '132DPAekvChbf4rlhEFTMl6EzxhVyXEGSh6rNinQXBD4'  # –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ô ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
CREDENTIALS_FILE = 'credentials.json'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
(
    MAIN_MENU, 
    CHRONO_TIME, CHRONO_PRODUCT, CHRONO_QUANTITY, 
    BLANK_TYPE, BLANK_QUANTITY,
    OTHER_OPERATION, OTHER_DETAILS
) = range(8)  

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_google_sheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ."""
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(GOOGLE_SHEET_ID)
        return sheet
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None

def save_to_google_sheets(user_data: dict, user_id: int, username: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—ã."""
    
    record_type = user_data.get('record_type', '–ù–µ —É–∫–∞–∑–∞–Ω')
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    operator_name = user_data.get('operator_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    sheet = get_google_sheet()
    if not sheet:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
        return False
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
        if record_type == '–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂':
            worksheet = sheet.worksheet('–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂')
            data = [
                timestamp,
                operator_name,
                user_data.get('chrono_time', ''),
                user_data.get('chrono_product', ''),
                user_data.get('chrono_quantity', '')  # –î–æ–±–∞–≤–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            ]
            
        elif record_type == '–ó–∞–≥–æ—Ç–æ–≤–∫–∞':
            worksheet = sheet.worksheet('–ó–∞–≥–æ—Ç–æ–≤–∫–∏')
            data = [
                timestamp,
                operator_name,
                user_data.get('blank_type', ''),
                user_data.get('blank_quantity', '')
            ]
            
        elif record_type == '–î—Ä—É–≥–æ–µ':
            worksheet = sheet.worksheet('–î—Ä—É–≥–æ–µ')
            data = [
                timestamp,
                operator_name,
                user_data.get('other_operation', ''),
                user_data.get('other_details', '')
            ]
        else:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        worksheet.append_row(data)
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets: {record_type}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
        return False

def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Google –¢–∞–±–ª–∏—Ü—É - —Å–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏."""
    sheet = get_google_sheet()
    if not sheet:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        sheet_titles = ['–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂', '–ó–∞–≥–æ—Ç–æ–≤–∫–∏', '–î—Ä—É–≥–æ–µ']
        existing_sheets = [ws.title for ws in sheet.worksheets()]
        
        for title in sheet_titles:
            if title not in existing_sheets:
                worksheet = sheet.add_worksheet(title=title, rows=1000, cols=10)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–∏—Å—Ç–∞
                if title == '–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂':
                    worksheet.append_row(['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–û–ø–µ—Ä–∞—Ç–æ—Ä', '–í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])  # –î–æ–±–∞–≤–∏–ª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                elif title == '–ó–∞–≥–æ—Ç–æ–≤–∫–∏':
                    worksheet.append_row(['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–û–ø–µ—Ä–∞—Ç–æ—Ä', '–¢–∏–ø –∑–∞–≥–æ—Ç–æ–≤–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
                elif title == '–î—Ä—É–≥–æ–µ':
                    worksheet.append_row(['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–û–ø–µ—Ä–∞—Ç–æ—Ä', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è'])
        
        logger.info("Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥.", user.first_name)
    
    context.user_data['operator_name'] = user.first_name
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google –¢–∞–±–ª–∏—Ü—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not context.bot_data.get('google_sheets_initialized'):
        if init_google_sheets():
            context.bot_data['google_sheets_initialized'] = True
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    main_menu_keyboard = [['‚è±Ô∏è –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂', '‚öôÔ∏è –ó–∞–≥–æ—Ç–æ–≤–∫–∞'], ['üìù –î—Ä—É–≥–æ–µ']]
    
    await update.message.reply_text(
        f'üè≠ *–£—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞*\n\n'
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n'
        '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:',
        reply_markup=ReplyKeyboardMarkup(
            main_menu_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        ),
        parse_mode='Markdown'
    )
    return MAIN_MENU

# === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
# (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ –∂–µ —Å–∞–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, 
#  –Ω–æ –≤–º–µ—Å—Ç–æ save_to_excel –≤—ã–∑—ã–≤–∞–µ–º save_to_google_sheets)

async def main_menu_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    choice = update.message.text
    
    if '–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂' in choice:
        context.user_data['record_type'] = '–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂'
        await update.message.reply_text('‚è±Ô∏è *–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂*\n\n–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n_–ü—Ä–∏–º–µ—Ä: "10:00-11:30" –∏–ª–∏ "—Å 9:00 –¥–æ 10:15"_', reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
        return CHRONO_TIME
        
    elif '–ó–∞–≥–æ—Ç–æ–≤–∫–∞' in choice:
        context.user_data['record_type'] = '–ó–∞–≥–æ—Ç–æ–≤–∫–∞'
        await update.message.reply_text('‚öôÔ∏è *–ó–∞–≥–æ—Ç–æ–≤–∫–∞*\n\n–ö–∞–∫—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É —Ç—ã —Å–¥–µ–ª–∞–ª?', reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
        return BLANK_TYPE
        
    elif '–î—Ä—É–≥–æ–µ' in choice:
        context.user_data['record_type'] = '–î—Ä—É–≥–æ–µ'
        await update.message.reply_text('üìù *–î—Ä—É–≥–æ–µ*\n\n–£–∫–∞–∂–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:', reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
        return OTHER_OPERATION
        
    else:
        await update.message.reply_text('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.')
        return MAIN_MENU

# === –û–ë–†–ê–ë–û–¢–ö–ê –•–†–û–ù–û–ú–ï–¢–†–ê–ñ–ê ===
async def chrono_time_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞."""
    chrono_time = update.message.text.strip()
    
    if not chrono_time:
        await update.message.reply_text('‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
        return CHRONO_TIME
    
    context.user_data['chrono_time'] = chrono_time
    
    await update.message.reply_text(
        f'‚úÖ *–í—Ä–µ–º—è:* {chrono_time}\n\n'
        '–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –±—ã–ª –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω?',
        parse_mode='Markdown'
    )
    return CHRONO_PRODUCT

async def chrono_product_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞."""
    chrono_product = update.message.text.strip()
    
    if not chrono_product:
        await update.message.reply_text('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
        return CHRONO_PRODUCT
    
    context.user_data['chrono_product'] = chrono_product
    
    await update.message.reply_text(
        f'‚úÖ *–ü—Ä–æ–¥—É–∫—Ç:* {chrono_product}\n\n'
        '–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã–ª–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ?',
        parse_mode='Markdown'
    )
    return CHRONO_QUANTITY

async def chrono_quantity_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    quantity_text = update.message.text.strip()
    user = update.message.from_user
    
    if not quantity_text:
        await update.message.reply_text('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
        return CHRONO_QUANTITY
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    try:
        quantity = int(quantity_text)
        if quantity <= 0:
            await update.message.reply_text('‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.')
            return CHRONO_QUANTITY
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        quantity = quantity_text
    
    context.user_data['chrono_quantity'] = quantity
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    if save_to_google_sheets(context.user_data, user.id, user.username or user.first_name):
        await update.message.reply_text(
            f'‚úÖ *–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google –¢–∞–±–ª–∏—Ü—ã!*\n\n'
            f'–í—Ä–µ–º—è: {context.user_data["chrono_time"]}\n'
            f'–ü—Ä–æ–¥—É–∫—Ç: {context.user_data["chrono_product"]}\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n\n'
            f'–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å /start',
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
    
    context.user_data.clear()
    return ConversationHandler.END

async def blank_type_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    blank_type = update.message.text.strip()
    if not blank_type:
        await update.message.reply_text('‚ùå –¢–∏–ø –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
        return BLANK_TYPE
    context.user_data['blank_type'] = blank_type
    await update.message.reply_text(f'‚úÖ *–ó–∞–≥–æ—Ç–æ–≤–∫–∞:* {blank_type}\n\n–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?', parse_mode='Markdown')
    return BLANK_QUANTITY

async def blank_quantity_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    quantity_text = update.message.text.strip()
    user = update.message.from_user
    if not quantity_text:
        await update.message.reply_text('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
        return BLANK_QUANTITY
    
    try:
        quantity = int(quantity_text)
        if quantity <= 0:
            await update.message.reply_text('‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.')
            return BLANK_QUANTITY
    except ValueError:
        quantity = quantity_text
    
    context.user_data['blank_quantity'] = quantity
    
    if save_to_google_sheets(context.user_data, user.id, user.username or user.first_name):
        await update.message.reply_text(f'‚úÖ *–ó–∞–≥–æ—Ç–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü—ã!*\n\n–¢–∏–ø: {context.user_data["blank_type"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n\n–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å /start', reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
    else:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
    
    context.user_data.clear()
    return ConversationHandler.END

async def other_operation_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    other_operation = update.message.text.strip()
    if not other_operation:
        await update.message.reply_text('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.')
        return OTHER_OPERATION
    context.user_data['other_operation'] = other_operation
    await update.message.reply_text(f'‚úÖ *–û–ø–µ—Ä–∞—Ü–∏—è:* {other_operation}\n\n–£–∫–∞–∂–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è:', parse_mode='Markdown')
    return OTHER_DETAILS

async def other_details_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    other_details = update.message.text.strip()
    user = update.message.from_user
    context.user_data['other_details'] = other_details
    
    if save_to_google_sheets(context.user_data, user.id, user.username or user.first_name):
        await update.message.reply_text(f'‚úÖ *–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü—ã!*\n\n–û–ø–µ—Ä–∞—Ü–∏—è: {context.user_data["other_operation"]}\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {other_details}\n\n–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å /start', reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
    else:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
    
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start.', reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_selected)],
            # –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂
            CHRONO_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, chrono_time_entered)],
            CHRONO_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, chrono_product_entered)],
            CHRONO_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, chrono_quantity_entered)],
            # –ó–∞–≥–æ—Ç–æ–≤–∫–∞
            BLANK_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, blank_type_entered)],
            BLANK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, blank_quantity_entered)],
            # –î—Ä—É–≥–æ–µ
            OTHER_OPERATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_operation_entered)],
            OTHER_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_details_entered)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    
    print("ü§ñ –ë–æ—Ç —Å Google Sheets –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("‚è±Ô∏è –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ | ‚öôÔ∏è –ó–∞–≥–æ—Ç–æ–≤–∫–∞ | üìù –î—Ä—É–≥–æ–µ")
    application.run_polling()

if __name__ == '__main__':
    main()
